# Firmware configuration file for the Raspberry Pi 3

#
# Firmware metadata
#

# All of these can be overriden using environment variables of the same name.
#
#  Run 'fwup -m' to query values in a .fw file.
#  Use 'fw_printenv' to query values on the target.
#
# These are used by Nerves libraries to introspect.
define(NERVES_FW_PRODUCT, "Nerves Firmware")
define(NERVES_FW_DESCRIPTION, "")
define(NERVES_FW_VERSION, "${NERVES_SDK_VERSION}")
define(NERVES_FW_PLATFORM, "odroid_xu4")
define(NERVES_FW_ARCHITECTURE, "arm")
define(NERVES_FW_AUTHOR, "The Nerves Team")

define(NERVES_FW_DEVPATH, "/dev/mmcblk0")
define(NERVES_FW_APPLICATION_PART0_DEVPATH, "/dev/mmcblk0p2") # Linux part number is 1-based
define(NERVES_FW_APPLICATION_PART0_FSTYPE, "ext4")
define(NERVES_FW_APPLICATION_PART0_TARGET, "/root")

# Default paths if not specified via the commandline
define(ROOTFS, "${NERVES_SYSTEM}/images/rootfs.squashfs")
define(UBOOT_PATH, "${NERVES_SYSTEM}/build/uboot-odroidxu4-v2017.05/sd_fuse")

# Bits that the Xu4 needs to boot
define(SIGNED_BL1_POSITION, 1)
define(BL2_POSITION, 31)
define(UBOOT_POSITION, 63)
define(TZSW_POSITION, 1503)

# This configuration file will create an image that has an MBR and the
# following 3 partitions:
#
# +----------------------------+
# | MBR                        |
# +----------------------------+
# | Firmware configuration data|
# | (formatted as uboot env)   |
# +----------------------------+
# | p0*: Boot A (FAT32)        |
# | zImage, bootcode.bin,      |
# | config.txt, etc.           |
# +----------------------------+
# | p0*: Boot B (FAT32)        |
# +----------------------------+
# | p1*: Rootfs A (squashfs)   |
# +----------------------------+
# | p1*: Rootfs B (squashfs)   |
# +----------------------------+
# | p2: Application (ext4)     |
# +----------------------------+
#
# The p0/p1 partition points to whichever of configurations A or B that is
# active.
#
# The image is sized to be less than 1 GB so that it fits on nearly any SDCard
# around. If you have a larger SDCard and need more space, feel free to bump
# the partition sizes below.

# (Sizes are in 512 byte blocks)
define(UBOOT_ENV_OFFSET, 2015)
define(UBOOT_ENV_COUNT, 32)  # 16 KB

define(BOOT_A_PART_OFFSET, 3072)
define(BOOT_A_PART_COUNT, 38630)
define-eval(BOOT_B_PART_OFFSET, "${BOOT_A_PART_OFFSET} + ${BOOT_A_PART_COUNT}")
define(BOOT_B_PART_COUNT, ${BOOT_A_PART_COUNT})

# Let the rootfs have room to grow up to 128 MiB and align it to the nearest 1
# MB boundary
define(ROOTFS_A_PART_OFFSET, 80332)
define(ROOTFS_A_PART_COUNT, 289044)
define-eval(ROOTFS_B_PART_OFFSET, "${ROOTFS_A_PART_OFFSET} + ${ROOTFS_A_PART_COUNT}")
define(ROOTFS_B_PART_COUNT, ${ROOTFS_A_PART_COUNT})

# Application partition. This partition can occupy all of the remaining space.
# Size it to fit the destination.
define-eval(APP_PART_OFFSET, "${ROOTFS_B_PART_OFFSET} + ${ROOTFS_B_PART_COUNT}")
define(APP_PART_COUNT, 1048576)

# Firmware archive metadata
meta-product = ${NERVES_FW_PRODUCT}
meta-description = ${NERVES_FW_DESCRIPTION}
meta-version = ${NERVES_FW_VERSION}
meta-platform = ${NERVES_FW_PLATFORM}
meta-architecture = ${NERVES_FW_ARCHITECTURE}
meta-author = ${NERVES_FW_AUTHOR}
meta-vcs-identifier = ${NERVES_FW_VCS_IDENTIFIER}
meta-misc = ${NERVES_FW_MISC}

# File resources are listed in the order that they are included in the .fw file
# This is important, since this is the order that they're written on a firmware
# update due to the event driven nature of the update system.
file-resource bl1.bin {
    host-path = "${UBOOT_PATH}/bl1.bin.hardkernel"
}
file-resource bl2.bin {
    host-path = "${UBOOT_PATH}/bl2.bin.hardkernel.720k_uboot"
}
file-resource u-boot-dtb.bin {
    host-path = "${NERVES_SYSTEM}/images/u-boot-dtb.bin"
    # host-path = "${UBOOT_PATH}/u-boot.bin.hardkernel"
}
file-resource tzsw.bin {
    host-path = "${UBOOT_PATH}/tzsw.bin.hardkernel"
}
file-resource boot.ini {
    host-path = "${NERVES_SYSTEM}/images/boot.ini"
}
file-resource zImage {
    host-path = "${NERVES_SYSTEM}/images/zImage"
}
file-resource exynos5422-odroidxu4.dtb {
    host-path = "${NERVES_SYSTEM}/images/exynos5422-odroidxu4.dtb"
}

file-resource rootfs.img {
    host-path = ${ROOTFS}

    # Error out if the rootfs size exceeds the partition size
    assert-size-lte = ${ROOTFS_A_PART_COUNT}
}

mbr mbr-a {
    partition 0 {
        block-offset = ${BOOT_A_PART_OFFSET}
        block-count = ${BOOT_A_PART_COUNT}
        type = 0xc # FAT32
        boot = true
    }
    partition 1 {
        block-offset = ${ROOTFS_A_PART_OFFSET}
        block-count = ${ROOTFS_A_PART_COUNT}
        type = 0x83 # Linux
    }
    partition 2 {
        block-offset = ${APP_PART_OFFSET}
        block-count = ${APP_PART_COUNT}
        type = 0x83 # Linux
    }
    # partition 3 is unused
}

mbr mbr-b {
    partition 0 {
        block-offset = ${BOOT_B_PART_OFFSET}
        block-count = ${BOOT_B_PART_COUNT}
        type = 0xc # FAT32
        boot = true
    }
    partition 1 {
        block-offset = ${ROOTFS_B_PART_OFFSET}
        block-count = ${ROOTFS_B_PART_COUNT}
        type = 0x83 # Linux
    }
    partition 2 {
        block-offset = ${APP_PART_OFFSET}
        block-count = ${APP_PART_COUNT}
        type = 0x83 # Linux
    }
    # partition 3 is unused
}

# Location where installed firmware information is stored.
# While this is called "u-boot", u-boot isn't involved in this
# setup. It just provides a convenient key/value store format.
uboot-environment uboot-env {
    block-offset = ${UBOOT_ENV_OFFSET}
    block-count = ${UBOOT_ENV_COUNT}
}

# This firmware task writes everything to the destination media
task complete {
    # Only match if not mounted
    require-unmounted-destination = true

    on-init {
        mbr_write(mbr-a)

        uboot_clearenv(uboot-env)
        uboot_setenv(uboot-env, "nerves_fw_active", "a")
        uboot_setenv(uboot-env, "nerves_fw_devpath", ${NERVES_FW_DEVPATH})
        uboot_setenv(uboot-env, "a.nerves_fw_application_part0_devpath", ${NERVES_FW_APPLICATION_PART0_DEVPATH})
        uboot_setenv(uboot-env, "a.nerves_fw_application_part0_fstype", ${NERVES_FW_APPLICATION_PART0_FSTYPE})
        uboot_setenv(uboot-env, "a.nerves_fw_application_part0_target", ${NERVES_FW_APPLICATION_PART0_TARGET})
        uboot_setenv(uboot-env, "a.nerves_fw_product", ${NERVES_FW_PRODUCT})
        uboot_setenv(uboot-env, "a.nerves_fw_description", ${NERVES_FW_DESCRIPTION})
        uboot_setenv(uboot-env, "a.nerves_fw_version", ${NERVES_FW_VERSION})
        uboot_setenv(uboot-env, "a.nerves_fw_platform", ${NERVES_FW_PLATFORM})
        uboot_setenv(uboot-env, "a.nerves_fw_architecture", ${NERVES_FW_ARCHITECTURE})
        uboot_setenv(uboot-env, "a.nerves_fw_author", ${NERVES_FW_AUTHOR})
        uboot_setenv(uboot-env, "a.nerves_fw_vcs_identifier", ${NERVES_FW_VCS_IDENTIFIER})
        uboot_setenv(uboot-env, "a.nerves_fw_misc", ${NERVES_FW_MISC})
        uboot_setenv(uboot-env, "boot_a_script", "load ${devtype} ${devnum}:${distro_bootpart} ${scriptaddr} ${prefix}${script}; source ${scriptaddr}")
        uboot_setenv(uboot-env, "boot_device", "SD")
        uboot_setenv(uboot-env, "boot_efi_binary", "load ${devtype} ${devnum}:${distro_bootpart} ${kernel_addr_r} efi/boot/bootarm.efi; if fdt addr ${fdt_addr_r}; then bootefi ${kernel_addr_r} ${fdt_addr_r};else bootefi ${kernel_addr_r} ${fdtcontroladdr};fi")
        uboot_setenv(uboot-env, "boot_extlinux", "sysboot ${devtype} ${devnum}:${distro_bootpart} any ${scriptaddr} ${prefix}extlinux/extlinux.conf")
        uboot_setenv(uboot-env, "boot_net_usb_start", "usb start")
        uboot_setenv(uboot-env, "boot_prefixes", "/ /boot/")
        uboot_setenv(uboot-env, "boot_script_dhcp", "boot.scr.uimg")
        uboot_setenv(uboot-env, "boot_scripts", "boot.scr.uimg boot.scr")
        uboot_setenv(uboot-env, "boot_targets", "mmc1 mmc0 usb0 pxe dhcp")
        uboot_setenv(uboot-env, "bootargs", "fb_x_res=1280 fb_y_res=720 vout=hdmi led_blink=1 hdmi_phy_res=720p60hz edid=0, hpd=1 disable_vu7=false touch_invert_x=false touch_invert_y=false")
        uboot_setenv(uboot-env, "bootcmd", "cfgload;movi r k 0 40008000;bootz 40008000")
        uboot_setenv(uboot-env, "bootcmd_dhcp", "run boot_net_usb_start; if dhcp ${scriptaddr} ${boot_script_dhcp}; then source ${scriptaddr}; fi;setenv efi_fdtfile ${fdtfile}; if test -z \"${fdtfile}\" -a -n \"${soc}\"; then setenv efi_fdtfile ${soc}-${board}${boardver}.dtb; fi; setenv efi_old_vci ${bootp_vci};setenv efi_old_arch ${bootp_arch};setenv bootp_vci PXEClient:Arch:00010:UNDI:003000;setenv bootp_arch 0xa;if dhcp ${kernel_addr_r}; then tftpboot ${fdt_addr_r} dtb/${efi_fdtfile};if fdt addr ${fdt_addr_r}; then bootefi ${kernel_addr_r} ${fdt_addr_r}; else bootefi ${kernel_addr_r} ${fdtcontroladdr};fi;fi;setenv bootp_vci ${efi_old_vci};setenv bootp_arch ${efi_old_arch};setenv efi_fdtfile;setenv efi_old_arch;setenv efi_old_vci;")
        uboot_setenv(uboot-env, "bootcmd_mmc0", "setenv devnum 0; run mmc_boot")
        uboot_setenv(uboot-env, "bootcmd_mmc1", "setenv devnum 1; run mmc_boot")
        uboot_setenv(uboot-env, "bootcmd_pxe", "run boot_net_usb_start; dhcp; if pxe get; then pxe boot; fi")
        uboot_setenv(uboot-env, "bootcmd_usb0", "setenv devnum 0; run usb_boot")
        uboot_setenv(uboot-env, "bootdelay", "1")
        uboot_setenv(uboot-env, "bootm_size", "0x10000000")
        uboot_setenv(uboot-env, "console", "console=ttySAC2,115200n8")
        uboot_setenv(uboot-env, "copy_uboot_emmc2sd", "mmc dev 0;emmc open 0;mmc read  ${loadaddr} 0x0000 0x07de;emmc close 0;mmc dev 1;  mmc write ${loadaddr} 0x0001 0x07de;mmc dev 0;mmc dev 1;  mmc write ${loadaddr} 0x07df 0x0020;mmc dev 0")
        uboot_setenv(uboot-env, "copy_uboot_sd2emmc", "mmc dev 0;mmc read  ${loadaddr} 0x0001 0x07de;mmc dev 1;emmc open  1;mmc write ${loadaddr} 0x0000 0x07de;emmc close 1;mmc dev 0;mmc dev 1;  mmc write ${loadaddr} 0x07df 0x0020;mmc dev 0")
        uboot_setenv(uboot-env, "cpu", "armv7")
        uboot_setenv(uboot-env, "dfu_alt_info", "Autoset by THOR/DFU command run.")
        uboot_setenv(uboot-env, "dfu_alt_system", "uImage fat 0 1;zImage fat 0 1;Image.itb fat 0 1;uInitrd fat 0 1;boot.scr fat 0 1;boot.cmd fat 0 1;exynos5422-odroidxu3.dtb fat 0 1;exynos5422-odroidxu3-lite.dtb fat 0 1;exynos5422-odroidxu4.dtb fat 0 1;boot part 0 1;root part 0 2")
        uboot_setenv(uboot-env, "distro_bootcmd", "for target in ${boot_targets}; do run bootcmd_${target}; done")
        uboot_setenv(uboot-env, "efi_dtb_prefixes", "/ /dtb/ /dtb/current/")
        uboot_setenv(uboot-env, "env_erase", "mw.l ${loadaddr} 0 4000;mmc dev 0;  mmc write ${loadaddr} 0x07df 0x0020;mmc dev 0")
        uboot_setenv(uboot-env, "fdt_addr_r", "0x43000000")
        uboot_setenv(uboot-env, "fdtcontroladdr", "b9921170")
        uboot_setenv(uboot-env, "fdtfile", "exynos5422-odroidxu4.dtb")
        uboot_setenv(uboot-env, "kernel_addr_r", "0x42000000")
        uboot_setenv(uboot-env, "load_efi_dtb", "load ${devtype} ${devnum}:${distro_bootpart} ${fdt_addr_r} ${prefix}${efi_fdtfile}")
        uboot_setenv(uboot-env, "loadaddr", "0x50000000")
        uboot_setenv(uboot-env, "mmc_boot", "if mmc dev ${devnum}; then setenv devtype mmc; run scan_dev_for_boot_part; fi")
        uboot_setenv(uboot-env, "mmcbootdev", "0")
        uboot_setenv(uboot-env, "mmcbootpart", "1")
        uboot_setenv(uboot-env, "mmcrootdev", "0")
        uboot_setenv(uboot-env, "mmcrootpart", "2")
        uboot_setenv(uboot-env, "pxefile_addr_r", "0x51000000")
        uboot_setenv(uboot-env, "ramdisk_addr_r", "0x43300000")
        uboot_setenv(uboot-env, "rootfstype", "ext4")
        uboot_setenv(uboot-env, "scan_dev_for_boot", "echo Scanning ${devtype} ${devnum}:${distro_bootpart}...; for prefix in ${boot_prefixes}; do run scan_dev_for_extlinux; run scan_dev_for_scripts; done;run scan_dev_for_efi;")
        uboot_setenv(uboot-env, "scan_dev_for_boot_part", "part list ${devtype} ${devnum} -bootable devplist; env exists devplist || setenv devplist 1; for distro_bootpart in ${devplist}; do if fstype ${devtype} ${devnum}:${distro_bootpart} bootfstype; then run scan_dev_for_boot; fi; done")
        uboot_setenv(uboot-env, "scan_dev_for_efi", "setenv efi_fdtfile ${fdtfile}; if test -z \"${fdtfile}\" -a -n \"${soc}\"; then setenv efi_fdtfile ${soc}-${board}${boardver}.dtb; fi; for prefix in ${efi_dtb_prefixes}; do if test -e ${devtype} ${devnum}:${distro_bootpart} ${prefix}${efi_fdtfile}; then run load_efi_dtb; fi;done;if test -e ${devtype} ${devnum}:${distro_bootpart} efi/boot/bootarm.efi; then echo Found EFI removable media binary efi/boot/bootarm.efi; run boot_efi_binary; echo EFI LOAD FAILED: continuing...; fi; setenv efi_fdtfile")
        uboot_setenv(uboot-env, "scan_dev_for_extlinux", "if test -e ${devtype} ${devnum}:${distro_bootpart} ${prefix}extlinux/extlinux.conf; then echo Found ${prefix}extlinux/extlinux.conf; run boot_extlinux; echo SCRIPT FAILED: continuing...; fi")
        uboot_setenv(uboot-env, "scan_dev_for_scripts", "for script in ${boot_scripts}; do if test -e ${devtype} ${devnum}:${distro_bootpart} ${prefix}${script}; then echo Found U-Boot script ${prefix}${script}; run boot_a_script; echo SCRIPT FAILED: continuing...; fi; done")
        uboot_setenv(uboot-env, "scriptaddr", "0x50000000")
        uboot_setenv(uboot-env, "soc", "exynos")
        uboot_setenv(uboot-env, "soc_id", "5422")
        uboot_setenv(uboot-env, "soc_rev", "0.1")
        uboot_setenv(uboot-env, "stderr", "serial")
        uboot_setenv(uboot-env, "stdin", "serial")
        uboot_setenv(uboot-env, "stdout", "serial")
        uboot_setenv(uboot-env, "usb_boot", "usb start; if usb dev ${devnum}; then setenv devtype usb; run scan_dev_for_boot_part; fi")
        uboot_setenv(uboot-env, "vendor", "samsung")




        fat_mkfs(${BOOT_A_PART_OFFSET}, ${BOOT_A_PART_COUNT})
        fat_setlabel(${BOOT_A_PART_OFFSET}, "BOOT-A")
        fat_mkdir(${BOOT_A_PART_OFFSET}, "overlays")
    }

    on-resource bl1.bin { raw_write(${SIGNED_BL1_POSITION}) }
    on-resource bl2.bin { raw_write(${BL2_POSITION}) }
    on-resource u-boot-dtb.bin { raw_write(${UBOOT_POSITION}) }
    on-resource tzsw.bin { raw_write(${TZSW_POSITION}) }

    on-resource boot.ini { fat_write(${BOOT_A_PART_OFFSET}, "boot.ini") }
    on-resource zImage { fat_write(${BOOT_A_PART_OFFSET}, "zImage") }
    on-resource exynos5422-odroidxu4.dtb { fat_write(${BOOT_A_PART_OFFSET}, "exynos5422-odroidxu4.dtb") }

    on-resource rootfs.img {
        # write to the first rootfs partition
        raw_write(${ROOTFS_A_PART_OFFSET})
    }

    on-finish {
        # Clear out any old data in the B partition that might be mistaken for
        # a file system. This is mostly to avoid confusion in humans when
        # reprogramming SDCards with unknown contents.
        raw_memset(${BOOT_B_PART_OFFSET}, 256, 0xff)
        raw_memset(${ROOTFS_B_PART_OFFSET}, 256, 0xff)

        # Invalidate the application data partition so that it is guaranteed to
        # trigger the corrupt filesystem detection code on first boot and get
        # formatted. If this isn't done and an old SDCard is reused, the
        # application data could be in a weird state.
        raw_memset(${APP_PART_OFFSET}, 256, 0xff)
    }
}

task upgrade.a {
    # This task upgrades the A partition
    require-partition-offset(1, ${ROOTFS_B_PART_OFFSET})

    # Verify the expected platform/architecture
    require-uboot-variable(uboot-env, "b.nerves_fw_platform", "${NERVES_FW_PLATFORM}")
    require-uboot-variable(uboot-env, "b.nerves_fw_architecture", "${NERVES_FW_ARCHITECTURE}")

    on-init {
        info("Upgrading partition A")

        # Clear some firmware information just in case this update gets
        # interrupted midway.
        uboot_unsetenv(uboot-env, "a.nerves_fw_version")

        # Reset the previous contents of the A boot partition
        fat_mkfs(${BOOT_A_PART_OFFSET}, ${BOOT_A_PART_COUNT})
        fat_setlabel(${BOOT_A_PART_OFFSET}, "BOOT-A")
        fat_mkdir(${BOOT_A_PART_OFFSET}, "overlays")

        # Indicate that the entire partition can be cleared
        trim(${ROOTFS_A_PART_OFFSET}, ${ROOTFS_A_PART_COUNT})
    }

    # Write the new boot partition files and rootfs. The MBR still points
    # to the B partition, so an error or power failure during this part
    # won't hurt anything.
    on-resource boot.ini { fat_write(${BOOT_A_PART_OFFSET}, "boot.ini") }
    on-resource zImage { fat_write(${BOOT_A_PART_OFFSET}, "zImage") }
    on-resource exynos5422-odroidxu4.dtb { fat_write(${BOOT_A_PART_OFFSET}, "exynos5422-odroidxu4.dtb") }
    on-resource rootfs.img { raw_write(${ROOTFS_A_PART_OFFSET}) }

    on-finish {
        # Update firmware metadata
        uboot_setenv(uboot-env, "a.nerves_fw_application_part0_devpath", ${NERVES_FW_APPLICATION_PART0_DEVPATH})
        uboot_setenv(uboot-env, "a.nerves_fw_application_part0_fstype", ${NERVES_FW_APPLICATION_PART0_FSTYPE})
        uboot_setenv(uboot-env, "a.nerves_fw_application_part0_target", ${NERVES_FW_APPLICATION_PART0_TARGET})
        uboot_setenv(uboot-env, "a.nerves_fw_product", ${NERVES_FW_PRODUCT})
        uboot_setenv(uboot-env, "a.nerves_fw_description", ${NERVES_FW_DESCRIPTION})
        uboot_setenv(uboot-env, "a.nerves_fw_version", ${NERVES_FW_VERSION})
        uboot_setenv(uboot-env, "a.nerves_fw_platform", ${NERVES_FW_PLATFORM})
        uboot_setenv(uboot-env, "a.nerves_fw_architecture", ${NERVES_FW_ARCHITECTURE})
        uboot_setenv(uboot-env, "a.nerves_fw_author", ${NERVES_FW_AUTHOR})
        uboot_setenv(uboot-env, "a.nerves_fw_vcs_identifier", ${NERVES_FW_VCS_IDENTIFIER})
        uboot_setenv(uboot-env, "a.nerves_fw_misc", ${NERVES_FW_MISC})

	# Switch over to boot the new firmware
        uboot_setenv(uboot-env, "nerves_fw_active", "a")
        mbr_write(mbr-a)
    }

    on-error {
    }
}

task upgrade.b {
    # This task upgrades the B partition
    require-partition-offset(1, ${ROOTFS_A_PART_OFFSET})

    # Verify the expected platform/architecture
    require-uboot-variable(uboot-env, "a.nerves_fw_platform", "${NERVES_FW_PLATFORM}")
    require-uboot-variable(uboot-env, "a.nerves_fw_architecture", "${NERVES_FW_ARCHITECTURE}")

    on-init {
        info("Upgrading partition B")

        # Clear some firmware information just in case this update gets
        # interrupted midway.
        uboot_unsetenv(uboot-env, "b.nerves_fw_version")

        # Reset the previous contents of the B boot partition
        fat_mkfs(${BOOT_B_PART_OFFSET}, ${BOOT_B_PART_COUNT})
        fat_setlabel(${BOOT_B_PART_OFFSET}, "BOOT-B")
        fat_mkdir(${BOOT_B_PART_OFFSET}, "overlays")

        trim(${ROOTFS_B_PART_OFFSET}, ${ROOTFS_B_PART_COUNT})
    }

    # Write the new boot partition files and rootfs. The MBR still points
    # to the A partition, so an error or power failure during this part
    # won't hurt anything.
    on-resource boot.ini { fat_write(${BOOT_A_PART_OFFSET}, "boot.ini") }
    on-resource zImage { fat_write(${BOOT_B_PART_OFFSET}, "zImage") }
    on-resource exynos5422-odroidxu4.dtb { fat_write(${BOOT_B_PART_OFFSET}, "exynos5422-odroidxu4.dtb") }
    on-resource rootfs.img { raw_write(${ROOTFS_B_PART_OFFSET}) }

    on-finish {
        # Update firmware metadata
        uboot_setenv(uboot-env, "b.nerves_fw_application_part0_devpath", ${NERVES_FW_APPLICATION_PART0_DEVPATH})
        uboot_setenv(uboot-env, "b.nerves_fw_application_part0_fstype", ${NERVES_FW_APPLICATION_PART0_FSTYPE})
        uboot_setenv(uboot-env, "b.nerves_fw_application_part0_target", ${NERVES_FW_APPLICATION_PART0_TARGET})
        uboot_setenv(uboot-env, "b.nerves_fw_product", ${NERVES_FW_PRODUCT})
        uboot_setenv(uboot-env, "b.nerves_fw_description", ${NERVES_FW_DESCRIPTION})
        uboot_setenv(uboot-env, "b.nerves_fw_version", ${NERVES_FW_VERSION})
        uboot_setenv(uboot-env, "b.nerves_fw_platform", ${NERVES_FW_PLATFORM})
        uboot_setenv(uboot-env, "b.nerves_fw_architecture", ${NERVES_FW_ARCHITECTURE})
        uboot_setenv(uboot-env, "b.nerves_fw_author", ${NERVES_FW_AUTHOR})
        uboot_setenv(uboot-env, "b.nerves_fw_vcs_identifier", ${NERVES_FW_VCS_IDENTIFIER})
        uboot_setenv(uboot-env, "b.nerves_fw_misc", ${NERVES_FW_MISC})

	# Switch over to boot the new firmware
        uboot_setenv(uboot-env, "nerves_fw_active", "b")
        mbr_write(mbr-b)
    }

    on-error {
    }
}

task upgrade.unexpected {
    require-uboot-variable(uboot-env, "a.nerves_fw_platform", "${NERVES_FW_PLATFORM}")
    require-uboot-variable(uboot-env, "a.nerves_fw_architecture", "${NERVES_FW_ARCHITECTURE}")
    on-init {
        error("Please check the media being upgraded. It doesn't look like either the A or B partitions are active.")
    }
}

task upgrade.wrongplatform {
    on-init {
        error("Expecting platform=${NERVES_FW_PLATFORM} and architecture=${NERVES_FW_ARCHITECTURE}")
    }
}
